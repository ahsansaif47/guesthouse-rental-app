// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (user_id, room_id, hotel_id, booking_time, duration)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateBookingParams struct {
	UserID      pgtype.UUID        `db:"user_id" json:"user_id"`
	RoomID      pgtype.UUID        `db:"room_id" json:"room_id"`
	HotelID     pgtype.UUID        `db:"hotel_id" json:"hotel_id"`
	BookingTime pgtype.Timestamptz `db:"booking_time" json:"booking_time"`
	Duration    pgtype.Interval    `db:"duration" json:"duration"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.UserID,
		arg.RoomID,
		arg.HotelID,
		arg.BookingTime,
		arg.Duration,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBooking = `-- name: DeleteBooking :one
DELETE FROM bookings WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBooking(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteBooking, id)
	err := row.Scan(&id)
	return id, err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id, user_id, room_id, hotel_id, booking_time, duration, rating FROM bookings WHERE id = $1
`

func (q *Queries) GetBookingByID(ctx context.Context, id pgtype.UUID) (Booking, error) {
	row := q.db.QueryRow(ctx, getBookingByID, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.HotelID,
		&i.BookingTime,
		&i.Duration,
		&i.Rating,
	)
	return i, err
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET room_id = COALESCE($2, room_id),
    booking_time = COALESCE($3, booking_time),
    duration = COALESCE($4, duration)
WHERE id = $1
RETURNING id
`

type UpdateBookingParams struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	RoomID      pgtype.UUID        `db:"room_id" json:"room_id"`
	BookingTime pgtype.Timestamptz `db:"booking_time" json:"booking_time"`
	Duration    pgtype.Interval    `db:"duration" json:"duration"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateBooking,
		arg.ID,
		arg.RoomID,
		arg.BookingTime,
		arg.Duration,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
