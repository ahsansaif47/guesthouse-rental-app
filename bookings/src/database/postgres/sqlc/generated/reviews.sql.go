// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reviews.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (id, user_id, booking_id, room_id, rating, review)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateReviewParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	BookingID pgtype.UUID `db:"booking_id" json:"booking_id"`
	RoomID    pgtype.UUID `db:"room_id" json:"room_id"`
	Rating    int32       `db:"rating" json:"rating"`
	Review    pgtype.Text `db:"review" json:"review"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.ID,
		arg.UserID,
		arg.BookingID,
		arg.RoomID,
		arg.Rating,
		arg.Review,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, user_id, booking_id, room_id, rating, review FROM reviews
WHERE id = $1
`

func (q *Queries) GetReview(ctx context.Context, id pgtype.UUID) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookingID,
		&i.RoomID,
		&i.Rating,
		&i.Review,
	)
	return i, err
}

const getReviewsByFilters = `-- name: GetReviewsByFilters :many
SELECT id, user_id, booking_id, room_id, rating, review FROM reviews
WHERE
    (user_id = $1 OR $1 IS NULL) AND
    (room_id = $2 OR $2 IS NULL) AND
    (rating > $3 OR $3 IS NULL)
`

type GetReviewsByFiltersParams struct {
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	RoomID pgtype.UUID `db:"room_id" json:"room_id"`
	Rating int32       `db:"rating" json:"rating"`
}

func (q *Queries) GetReviewsByFilters(ctx context.Context, arg GetReviewsByFiltersParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsByFilters, arg.UserID, arg.RoomID, arg.Rating)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookingID,
			&i.RoomID,
			&i.Rating,
			&i.Review,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByUser = `-- name: GetReviewsByUser :many
SELECT id, user_id, booking_id, room_id, rating, review FROM reviews
WHERE user_id = $1
`

func (q *Queries) GetReviewsByUser(ctx context.Context, userID pgtype.UUID) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookingID,
			&i.RoomID,
			&i.Rating,
			&i.Review,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET rating = $2, review = $3
WHERE id = $1
RETURNING id
`

type UpdateReviewParams struct {
	ID     pgtype.UUID `db:"id" json:"id"`
	Rating int32       `db:"rating" json:"rating"`
	Review pgtype.Text `db:"review" json:"review"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.ID, arg.Rating, arg.Review)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
