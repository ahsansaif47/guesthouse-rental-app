// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotels.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteHotel = `-- name: DeleteHotel :one
DELETE from Hotels
where id = $1
RETURNING id, name, location, address, manager_id
`

func (q *Queries) DeleteHotel(ctx context.Context, id pgtype.UUID) (Hotel, error) {
	row := q.db.QueryRow(ctx, deleteHotel, id)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ManagerID,
	)
	return i, err
}

const getHotel = `-- name: GetHotel :one
SELECT id, name, location, address, manager_id
FROM hotels
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetHotel(ctx context.Context, id pgtype.UUID) (Hotel, error) {
	row := q.db.QueryRow(ctx, getHotel, id)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ManagerID,
	)
	return i, err
}

const insertHotel = `-- name: InsertHotel :exec
INSERT INTO hotels (id, name, location, address, manager_id)
VALUES ($1, $2, $3, $4, $5)
`

type InsertHotelParams struct {
	ID        pgtype.UUID  `db:"id" json:"id"`
	Name      string       `db:"name" json:"name"`
	Location  pgtype.Point `db:"location" json:"location"`
	Address   string       `db:"address" json:"address"`
	ManagerID pgtype.UUID  `db:"manager_id" json:"manager_id"`
}

func (q *Queries) InsertHotel(ctx context.Context, arg InsertHotelParams) error {
	_, err := q.db.Exec(ctx, insertHotel,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.ManagerID,
	)
	return err
}

const updateHotel = `-- name: UpdateHotel :one
UPDATE Hotels
SET name = COALESCE($2, name),
    location = COALESCE($3, location),
    address = COALESCE($3, address),
    manager_id = COALESCE($4, manager_id)
WHERE ID = $1
RETURNING id, name, location, address, manager_id
`

type UpdateHotelParams struct {
	ID        pgtype.UUID  `db:"id" json:"id"`
	Name      string       `db:"name" json:"name"`
	Location  pgtype.Point `db:"location" json:"location"`
	ManagerID pgtype.UUID  `db:"manager_id" json:"manager_id"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) (Hotel, error) {
	row := q.db.QueryRow(ctx, updateHotel,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.ManagerID,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ManagerID,
	)
	return i, err
}
