// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rooms.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO Rooms (id, hotel_id, floor, price, images, description)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateRoomParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	HotelID     pgtype.UUID `db:"hotel_id" json:"hotel_id"`
	Floor       int32       `db:"floor" json:"floor"`
	Price       int32       `db:"price" json:"price"`
	Images      []string    `db:"images" json:"images"`
	Description pgtype.Text `db:"description" json:"description"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.Exec(ctx, createRoom,
		arg.ID,
		arg.HotelID,
		arg.Floor,
		arg.Price,
		arg.Images,
		arg.Description,
	)
	return err
}

const deleteRoomByID = `-- name: DeleteRoomByID :one
DELETE from Rooms
where id = $1
RETURNING id, hotel_id, floor, price, images, description
`

func (q *Queries) DeleteRoomByID(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, deleteRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Floor,
		&i.Price,
		&i.Images,
		&i.Description,
	)
	return i, err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, hotel_id, floor, price, images, description
FROM Rooms
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRoomByID(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Floor,
		&i.Price,
		&i.Images,
		&i.Description,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE Rooms
SET price = COALESCE($2, price),
    description = COALESCE($3, description),
    images = CASE
                WHEN $4 IS NOT NULL THEN ARRAY_CAT(images, $4::TEXT[])
                ELSE images
            END
WHERE ID = $1
RETURNING id, hotel_id, floor, price, images, description
`

type UpdateRoomParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Price       int32       `db:"price" json:"price"`
	Description pgtype.Text `db:"description" json:"description"`
	Images      []string    `db:"images" json:"images"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom,
		arg.ID,
		arg.Price,
		arg.Description,
		arg.Images,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Floor,
		&i.Price,
		&i.Images,
		&i.Description,
	)
	return i, err
}
