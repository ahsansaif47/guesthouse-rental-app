// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :one
DELETE from Users
where id = $1
RETURNING id, name, password, email, phone, user_type
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.UserType,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, email, phone, user_type
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.UserType,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, name, password, email, phone, user_type)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertUserParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	Password string      `db:"password" json:"password"`
	Email    string      `db:"email" json:"email"`
	Phone    string      `db:"phone" json:"phone"`
	UserType string      `db:"user_type" json:"user_type"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.Phone,
		arg.UserType,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET name = COALESCE($2, name),
    password = COALESCE($3, password),
    phone = COALESCE($4, phone)
WHERE ID = $1
RETURNING id, name, password, email, phone, user_type
`

type UpdateUserParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	Password string      `db:"password" json:"password"`
	Phone    string      `db:"phone" json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.UserType,
	)
	return i, err
}
